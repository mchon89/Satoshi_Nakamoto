>Satoshi Nakamoto wrote:

>> I've been working on a new electronic cash system that's fully

>> peer-to-peer, with no trusted third party.

>>

>> The paper is available at:

>> http://www.bitcoin.org/bitcoin.pdf

>

>We very, very much need such a system, but the way I understand your

>proposal, it does not seem to scale to the required size.

>

>For transferable proof of work tokens to have value, they must have

>monetary value. To have monetary value, they must be transferred within

>a very large network - for example a file trading network akin to

>bittorrent.

>

>To detect and reject a double spending event in a timely manner, one

>must have most past transactions of the coins in the transaction, which,

> naively implemented, requires each peer to have most past

>transactions, or most past transactions that occurred recently. If

>hundreds of millions of people are doing transactions, that is a lot of

>bandwidth - each must know all, or a substantial part thereof.

>





Long before the network gets anywhere near as large as that, it would be safe

for users to use Simplified Payment Verification (section 8) to check for

double spending, which only requires having the chain of block headers, or

about 12KB per day. Only people trying to create new coins would need to run

network nodes. At first, most users would run network nodes, but as the

network grows beyond a certain point, it would be left more and more to

specialists with server farms of specialized hardware. A server farm would

only need to have one node on the network and the rest of the LAN connects with

that one node.



The bandwidth might not be as prohibitive as you think. A typical transaction

would be about 400 bytes (ECC is nicely compact). Each transaction has to be

broadcast twice, so lets say 1KB per transaction. Visa processed 37 billion

transactions in FY2008, or an average of 100 million transactions per day.

That many transactions would take 100GB of bandwidth, or the size of 12 DVD or

2 HD quality movies, or about $18 worth of bandwidth at current prices.



If the network were to get that big, it would take several years, and by then,

sending 2 HD movies over the Internet would probably not seem like a big deal.



Thanks for bringing up that point.



I didn't really make that statement as strong as I could have. The requirement

is that the good guys collectively have more CPU power than any single

attacker.



There would be many smaller zombie farms that are not big enough to overpower

the network, and they could still make money by generating bitcoins. The

smaller farms are then the "honest nodes". (I need a better term than

"honest") The more smaller farms resort to generating bitcoins, the higher the

bar gets to overpower the network, making larger farms also too small to

overpower it so that they may as well generate bitcoins too. According to the

"long tail" theory, the small, medium and merely large farms put together

should add up to a lot more than the biggest zombie farm.



Even if a bad guy does overpower the network, it's not like he's instantly

rich. All he can accomplish is to take back money he himself spent, like

bouncing a check. To exploit it, he would have to buy something from a

merchant, wait till it ships, then overpower the network and try to take his

money back. I don't think he could make as much money trying to pull a carding

scheme like that as he could by generating bitcoins. With a zombie farm that

big, he could generate more bitcoins than everyone else combined.



The Bitcoin network might actually reduce spam by diverting zombie farms to

generating bitcoins instead.



Yes, but we can win a major battle in the arms race and gain a new territory of

freedom for several years.



Governments are good at cutting off the heads of a centrally controlled

networks like Napster, but pure P2P networks like Gnutella and Tor seem to be

holding their own.




Increasing hardware speed is handled: "To compensate for increasing hardware

speed and varying interest in running nodes over time, the proof-of-work

difficulty is determined by a moving average targeting an average number of

blocks per hour. If they're generated too fast, the difficulty increases."



As computers get faster and the total computing power applied to creating

bitcoins increases, the difficulty increases proportionally to keep the total

new production constant. Thus, it is known in advance how many new bitcoins

will be created every year in the future.



The fact that new coins are produced means the money supply increases by a

planned amount, but this does not necessarily result in inflation. If the

supply of money increases at the same rate that the number of people using it

increases, prices remain stable. If it does not increase as fast as demand,

there will be deflation and early holders of money will see its value increase.



Coins have to get initially distributed somehow, and a constant rate seems like

the best formula.



Right, nodes keep transactions in their working set until they get into a

block. If a transaction reaches 90% of nodes, then each time a new block is

found, it has a 90% chance of being in it.



That does not need to be checked for. The transaction in whichever branch ends

up getting ahead becomes the valid one, the other is invalid. If someone tries

to double spend like that, one and only one spend will always become valid, the

others invalid.



Receivers of transactions will normally need to hold transactions for perhaps

an hour or more to allow time for this kind of possibility to be resolved.

They can still re-spend the coins immediately, but they should wait before

taking an action such as shipping goods.




The attacker isn't adding blocks to the end. He has to go back and redo the

block his transaction is in and all the blocks after it, as well as any new

blocks the network keeps adding to the end while he's doing that. He's

rewriting history. Once his branch is longer, it becomes the new valid one.



This touches on a key point. Even though everyone present may see the

shenanigans going on, there's no way to take advantage of that fact.



It is strictly necessary that the longest chain is always considered the valid

one. Nodes that were present may remember that one branch was there first and

got replaced by another, but there would be no way for them to convince those

who were not present of this. We can't have subfactions of nodes that cling to

one branch that they think was first, others that saw another branch first, and

others that joined later and never saw what happened. The CPU power

proof-of-work vote must have the final say. The only way for everyone to stay

on the same page is to believe that the longest chain is always the valid one,

no matter what.



The recipient just needs to verify it back to a depth that is sufficiently far

back in the block chain, which will often only require a depth of 2

transactions. All transactions before that can be discarded.




Right, exactly. When a node receives a block, it checks the signatures of

every transaction in it against previous transactions in blocks. Blocks can

only contain transactions that depend on valid transactions in previous blocks

or the same block. Transaction C could depend on transaction B in the same

block and B depends on transaction A in an earlier block.



I appreciate your questions. I actually did this kind of backwards. I had to

write all the code before I could convince myself that I could solve every

problem, then I wrote the paper. I think I will be able to release the code

sooner than I could write a detailed spec. You're already right about most of

your assumptions where you filled in the blanks.




They both broadcast their blocks. All nodes receive them and keep both, but

only work on the one they received first. We'll suppose exactly half received

one first, half the other.



In a short time, all the transactions will finish propagating so that everyone

has the full set. The nodes working on each side will be trying to add the

transactions that are missing from their side. When the next proof-of-work is

found, whichever previous block that node was working on, that branch becomes

longer and the tie is broken. Whichever side it is, the new block will contain

the other half of the transactions, so in either case, the branch will contain

all transactions. Even in the unlikely event that a split happened twice in a

row, both sides of the second split would contain the full set of transactions

anyway.



It's not a problem if transactions have to wait one or a few extra cycles to

get into a block.





The proof-of-work chain is the solution to the synchronisation problem, and to

knowing what the globally shared view is without having to trust anyone.



A transaction will quickly propagate throughout the network, so if two versions

of the same transaction were reported at close to the same time, the one with

the head start would have a big advantage in reaching many more nodes first.

Nodes will only accept the first one they see, refusing the second one to

arrive, so the earlier transaction would have many more nodes working on

incorporating it into the next proof-of-work. In effect, each node votes for

its viewpoint of which transaction it saw first by including it in its

proof-of-work effort.



If the transactions did come at exactly the same time and there was an even

split, it's a toss up based on which gets into a proof-of-work first, and that

decides which is valid.



When a node finds a proof-of-work, the new block is propagated throughout the

network and everyone adds it to the chain and starts working on the next block

after it. Any nodes that had the other transaction will stop trying to include

it in a block, since it's now invalid according to the accepted chain.



The proof-of-work chain is itself self-evident proof that it came from the

globally shared view. Only the majority of the network together has enough CPU

power to generate such a difficult chain of proof-of-work. Any user, upon

receiving the proof-of-work chain, can see what the majority of the network has

approved. Once a transaction is hashed into a link that's a few links back in

the chain, it is firmly etched into the global history.





If you're having trouble with the inflation issue, it's easy to tweak it for

transaction fees instead. It's as simple as this: let the output value from

any transaction be 1 cent less than the input value. Either the client

software automatically writes transactions for 1 cent more than the intended

payment value, or it could come out of the payee's side. The incentive value

when a node finds a proof-of-work for a block could be the total of the fees in

the block.



When there are multiple double-spent versions of the same transaction, one and

only one will become valid.



The receiver of a payment must wait an hour or so before believing that it's

valid. The network will resolve any possible double-spend races by then.



The guy who received the double-spend that became invalid never thought he had

it in the first place. His software would have shown the transaction go from

"unconfirmed" to "invalid". If necessary, the UI can be made to hide

transactions until they're sufficiently deep in the block chain.


Sorry if I didn't make that clear. The target time between blocks will

probably be 10 minutes.



Every block includes its creation time. If the time is off by more than 36

hours, other nodes won't work on it. If the timespan over the last 6*24*30

blocks is less than 15 days, blocks are being generated too fast and the

proof-of-work difficulty doubles. Everyone does the same calculation with the

same chain data, so they all get the same result at the same link in the chain.



Instantant non-repudiability is not a feature, but it's still much faster than

existing systems. Paper cheques can bounce up to a week or two later. Credit

card transactions can be contested up to 60 to 180 days later. Bitcoin

transactions can be sufficiently irreversible in an hour or two.


With the transaction fee based incentive system I recently posted, nodes would

have an incentive to include all the paying transactions they receive.




The proof-of-work chain is a solution to the Byzantine Generals' Problem. I'll

try to rephrase it in that context.



A number of Byzantine Generals each have a computer and want to attack the

King's wi-fi by brute forcing the password, which they've learned is a certain

number of characters in length. Once they stimulate the network to generate a

packet, they must crack the password within a limited time to break in and

erase the logs, otherwise they will be discovered and get in trouble. They

only have enough CPU power to crack it fast enough if a majority of them attack

at the same time.



They don't particularly care when the attack will be, just that they all agree.

It has been decided that anyone who feels like it will announce a time, and

whatever time is heard first will be the official attack time. The problem is

that the network is not instantaneous, and if two generals announce different

attack times at close to the same time, some may hear one first and others hear

the other first.



They use a proof-of-work chain to solve the problem. Once each general

receives whatever attack time he hears first, he sets his computer to solve an

extremely difficult proof-of-work problem that includes the attack time in its

hash. The proof-of-work is so difficult, it's expected to take 10 minutes of

them all working at once before one of them finds a solution. Once one of the

generals finds a proof-of-work, he broadcasts it to the network, and everyone

changes their current proof-of-work computation to include that proof-of-work

in the hash they're working on. If anyone was working on a different attack

time, they switch to this one, because its proof-of-work chain is now longer.



After two hours, one attack time should be hashed by a chain of 12

proofs-of-work. Every general, just by verifying the difficulty of the

proof-of-work chain, can estimate how much parallel CPU power per hour was

expended on it and see that it must have required the majority of the computers

to produce that much proof-of-work in the allotted time. They had to all have

seen it because the proof-of-work is proof that they worked on it. If the CPU

power exhibited by the proof-of-work chain is sufficient to crack the password,

they can safely attack at the agreed time.



The proof-of-work chain is how all the synchronisation, distributed database

and global view problems you've asked about are solved.


Fortunately, it's only necessary to keep a pending-transaction pool for the

current best branch. When a new block arrives for the best branch,

ConnectBlock removes the block's transactions from the pending-tx pool. If a

different branch becomes longer, it calls DisconnectBlock on the main branch

down to the fork, returning the block transactions to the pending-tx pool, and

calls ConnectBlock on the new branch, sopping back up any transactions that

were in both branches. It's expected that reorgs like this would be rare and

shallow.



With this optimisation, candidate branches are not really any burden. They

just sit on the disk and don't require attention unless they ever become the

main chain.



Broadcasts will probably be almost completely reliable. TCP transmissions are

rarely ever dropped these days, and the broadcast protocol has a retry

mechanism to get the data from other nodes after a while. If broadcasts turn

out to be slower in practice than expected, the target time between blocks may

have to be increased to avoid wasting resources. We want blocks to usually

propagate in much less time than it takes to generate them, otherwise nodes

would spend too much time working on obsolete blocks.



I'm planning to run an automated test with computers randomly sending payments

to each other and randomly dropping packets.



It's very attractive to the libertarian viewpoint if we can explain it

properly. I'm better with code than with words though.




I'll try and hurry up and release the sourcecode as soon as possible to serve

as a reference to help clear up all these implementation questions.



Only the buyer signs, and there's no blinding.



Identities are not used, and there's no reliance on recourse. It's all

prevention.



No challenges or secret shares. A basic transaction is just what you see in

the figure in section 2. A signature (of the buyer) satisfying the public key

of the previous transaction, and a new public key (of the seller) that must be

satisfied to spend it the next time.



Right, if it's equal in length, ties are broken by keeping the earliest one

received.



There's no need for reporting of "proof of double spending" like that. If the

same chain contains both spends, then the block is invalid and rejected.



Same if a block didn't have enough proof-of-work. That block is invalid and

rejected. There's no need to circulate a report about it. Every node could

see that and reject it before relaying it.



If there are two competing chains, each containing a different version of the

same transaction, with one trying to give money to one person and the other

trying to give the same money to someone else, resolving which of the spends is

valid is what the whole proof-of-work chain is about.



We're not "on the lookout" for double spends to sound the alarm and catch the

cheater. We merely adjudicate which one of the spends is valid. Receivers of

transactions must wait a few blocks to make sure that resolution has had time

to complete. Would be cheaters can try and simultaneously double-spend all

they want, and all they accomplish is that within a few blocks, one of the

spends becomes valid and the others become invalid. Any later double-spends

are immediately rejected once there's already a spend in the main chain.



Even if an earlier spend wasn't in the chain yet, if it was already in all the

nodes' pools, then the second spend would be turned away by all those nodes

that already have the first spend.




Right. They also refresh whenever a new transaction comes in, so L pretty much

contains everything in A all the time.



It's a Hashcash style SHA-256 proof-of-work (partial pre-image of zero), not a

signature.



If you're thinking of it as a CPU-intensive digital signing, then you may be

thinking of a race to finish a long operation first and the fastest always

winning.



The proof-of-work is a Hashcash style SHA-256 collision finding. It's a

memoryless process where you do millions of hashes a second, with a small

chance of finding one each time. The 3 or 4 fastest nodes' dominance would

only be proportional to their share of the total CPU power. Anyone's chance of

finding a solution at any time is proportional to their CPU power.



There will be transaction fees, so nodes will have an incentive to receive and

include all the transactions they can. Nodes will eventually be compensated by

transaction fees alone when the total coins created hits the pre-determined

ceiling.



Right.



Every transaction is one of these. Section 9, Combining and Splitting Value.





Right, it's ECC digital signatures. A new key pair is used for every

transaction.



It's not pseudonymous in the sense of nyms identifying people, but it

is at least a little pseudonymous in that the next action on a coin

can be identified as being from the owner of that coin.





There is no reliance on identifying anyone. As you've said, it's

futile and can be trivially defeated with sock puppets.



The credential that establishes someone as real is the ability to

supply CPU power.







Section 11 calculates the worst case under attack. Typically, 5 or

10 blocks is enough for that. If you're selling something that

doesn't merit a network-scale attack to steal it, in practice you

could cut it closer.





This is a version 2 problem that I believe can be solved fairly

satisfactorily for most applications.



The race is to spread your transaction on the network first. Think 6

degrees of freedom -- it spreads exponentially. It would only take

something like 2 minutes for a transaction to spread widely enough

that a competitor starting late would have little chance of grabbing

very many nodes before the first one is overtaking the whole network.

During those 2 minutes, the merchant's nodes can be watching for a

double-spent transaction. The double-spender would not be able to

blast his alternate transaction out to the world without the merchant

getting it, so he has to wait before starting.



If the real transaction reaches 90% and the double-spent tx reaches

10%, the double-spender only gets a 10% chance of not paying, and 90%

chance his money gets spent. For almost any type of goods, that's

not going to be worth it for the scammer.



Information based goods like access to website or downloads are

non-fencible. Nobody is going to be able to make a living off

stealing access to websites or downloads. They can go to the file

sharing networks to steal that. Most instant-access products aren't

going to have a huge incentive to steal.



If a merchant actually has a problem with theft, they can make the

customer wait 2 minutes, or wait for something in e-mail, which many

already do. If they really want to optimize, and it's a large

download, they could cancel the download in the middle if the

transaction comes back double-spent. If it's website access,

typically it wouldn't be a big deal to let the customer have access

for 5 minutes and then cut off access if it's rejected. Many such

sites have a free trial anyway.




I mean a node only needs the pending-tx pool for the best branch it

has. The branch that it currently thinks is the best branch.

That's the branch it'll be trying to make a block out of, which is

all it needs the pool for.


I think I've got the peer networking broadcast mechanism covered.


Each node sends its neighbours an inventory list of hashes of the

new blocks and transactions it has. The neighbours request the

items they don't have yet. If the item never comes through after a

timeout, they request it from another neighbour that had it. Since

all or most of the neighbours should eventually have each item,

even if the coms get fumbled up with one, they can get it from any

of the others, trying one at a time.



The inventory-request-data scheme introduces a little latency, but

it ultimately helps speed more by keeping extra data blocks off the

transmit queues and conserving bandwidth.



I believe I've worked through all those little details over the

last year and a half while coding it, and there were a lot of them.

The functional details are not covered in the paper, but the

sourcecode is coming soon. I sent you the main files.

(available by request at the moment, full release soon)




Announcing the first release of Bitcoin, a new electronic cash

system that uses a peer-to-peer network to prevent double-spending.

It's completely decentralized with no server or central authority.



See bitcoin.org for screenshots.



Download link:

http://downloads.sourceforge.net/bitcoin/bitcoin-0.1.0.rar



Windows only for now. Open source C++ code is included.



- Unpack the files into a directory

- Run BITCOIN.EXE

- It automatically connects to other nodes



If you can keep a node running that accepts incoming connections,

you'll really be helping the network a lot. Port 8333 on your

firewall needs to be open to receive incoming connections.



The software is still alpha and experimental. There's no guarantee

the system's state won't have to be restarted at some point if it

becomes necessary, although I've done everything I can to build in

extensibility and versioning.



You can get coins by getting someone to send you some, or turn on

Options->Generate Coins to run a node and generate blocks. I made

the proof-of-work difficulty ridiculously easy to start with, so

for a little while in the beginning a typical PC will be able to

generate coins in just a few hours. It'll get a lot harder when

competition makes the automatic adjustment drive up the difficulty.

Generated coins must wait 120 blocks to mature before they can be

spent.



There are two ways to send money. If the recipient is online, you

can enter their IP address and it will connect, get a new public

key and send the transaction with comments. If the recipient is

not online, it is possible to send to their Bitcoin address, which

is a hash of their public key that they give you. They'll receive

the transaction the next time they connect and get the block it's

in. This method has the disadvantage that no comment information

is sent, and a bit of privacy may be lost if the address is used

multiple times, but it is a useful alternative if both users can't

be online at the same time or the recipient can't receive incoming

connections.



Total circulation will be 21,000,000 coins. It'll be distributed

to network nodes when they make blocks, with the amount cut in half

every 4 years.



first 4 years: 10,500,000 coins

next 4 years: 5,250,000 coins

next 4 years: 2,625,000 coins

next 4 years: 1,312,500 coins

etc...



When that runs out, the system can support transaction fees if

needed. It's based on open market competition, and there will

probably always be nodes willing to process transactions for free.



I would be surprised if 10 years from now we're not using

electronic currency in some way, now that we know a way to do it

that won't inevitably get dumbed down when the trusted third party

gets cold feet.



It could get started in a narrow niche like reward points,

donation tokens, currency for a game or micropayments for adult

sites. Initially it can be used in proof-of-work applications

for services that could almost be free but not quite.



It can already be used for pay-to-send e-mail. The send dialog is

resizeable and you can enter as long of a message as you like.

It's sent directly when it connects. The recipient doubleclicks

on the transaction to see the full message. If someone famous is

getting more e-mail than they can read, but would still like to

have a way for fans to contact them, they could set up Bitcoin and

give out the IP address on their website. "Send X bitcoins to my

priority hotline at this IP and I'll read the message personally."



Subscription sites that need some extra proof-of-work for their

free trial so it doesn't cannibalize subscriptions could charge

bitcoins for the trial.



It might make sense just to get some in case it catches on. If

enough people think the same way, that becomes a self fulfilling

prophecy. Once it gets bootstrapped, there are so many

applications if you could effortlessly pay a few cents to a

website as easily as dropping coins in a vending machine.




Another factor that would mitigate spam if POW tokens have value:

there would be a profit motive for people to set up massive

quantities of fake e-mail accounts to harvest POW tokens from

spam. They'd essentially be reverse-spamming the spammers with

automated mailboxes that collect their POW and don't read the

message. The ratio of fake mailboxes to real people could become

too high for spam to be cost effective.



The process has the potential to establish the POW token's value

in the first place, since spammers that don't have a botnet could

buy tokens from harvesters. While the buying back would

temporarily let more spam through, it would only hasten the

self-defeating cycle leading to too many harvesters exploiting the

spammers.



Interestingly, one of the e-gold systems already has a form of

spam called "dusting". Spammers send a tiny amount of gold dust

in order to put a spam message in the transaction's comment field.

If the system let users configure the minimum payment they're

willing to receive, or at least the minimum that can have a

message with it, users could set how much they're willing to get

paid to receive spam.
